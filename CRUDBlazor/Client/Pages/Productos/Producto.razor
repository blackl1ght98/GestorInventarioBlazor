@using System.Text.Json
@using System.Text
@using CRUDBlazor.Client.Services.Producto
@using CRUDBlazor.Shared.Productos
@using System.Web
@using CRUDBlazor.Shared.Proveedores
@inject HttpClient http
@inject NavigationManager NavigationManager
@inject ApiProperties prop 
@page "/productos"
<h3>Producto</h3>
<div class="container-fluid" style="max-width: 100%; overflow-x: hidden;">
    @if (prop.productos == null)
    {
        <div class="spinner-border" role="status">
            <span class="sr-only"></span>
        </div>
    }
    else
    {
        <ConfiguracionPaginacion PaginasTotales="prop.paginasTotales" PaginaActual="prop.paginaActual" PaginaSeleccionada="PaginaSeleccionada"></ConfiguracionPaginacion>
       
        <EditForm Model="this" OnValidSubmit="GetBuscarProducto">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <InputText id="buscar" @bind-Value="prop.buscar" class="form-control" placeholder="Buscar producto" />
            <select class="form-select mt-2" @bind="prop.ordenarPorPrecio">
                <option value="">Ordenar por precio</option>
                <option value="asc">Ascendente</option>
                <option value="desc">Descendente</option>
            </select>
            <select class="form-select mt-2" @bind="prop.idProveedor">
                <option value="0">Seleccionar proveedor</option>
            @foreach (var proveedor in prop.proveedores)
            {
                <option value="@proveedor.id">@proveedor.nombreProveedor</option>
            }
        </select>
            <div class="d-flex justify-content-between mt-2 mb-3">
                <button type="submit" class="btn btn-primary">Buscar</button>
                <button @onclick="LimpiarFiltros" class="btn btn-warning">Limpiar filtros</button>
            </div>
        </EditForm>
        
      
        @foreach (var producto in prop.productos)
        {
            <div class="card mb-3">
                <div class="card-header">
                    <h5>Datos del Producto</h5>
                </div>
                <div class="card-body">
                    <p class="card-text"><strong>Nombre Producto:</strong> @producto.nombreProducto</p>
                    <p class="card-text"><strong>Descripcion:</strong> @producto.descripcion</p>
                    <p class="card-text">
                        <strong>Imagen:</strong> <br/><img src="@producto.imagen" alt="Imagen del producto" style="width:100px; height:100px;" />
                    </p>
                    <p class="card-text"><strong>Cantidad:</strong> @producto.cantidad</p>
                    <p class="card-text"><strong>Precio:</strong> @producto.precio</p>
                    <p class="card-text"><strong>Nombre del proveedor:</strong> @producto.idProveedorNavigation.nombreProveedor</p>

                </div>
                <div class="card-footer d-flex justify-content-between">

                    <div>
                        <AuthorizeView Roles="administrador">
                        <a href="/deleteproducto/@producto.id" class="btn btn-danger mt-2 ml-2">Eliminar</a>
                        </AuthorizeView>
                        <AuthorizeView Roles="administrador">
                        <a href="/actualizarproducto/@producto.id" class="btn btn-primary mt-2 ml-2">Actualizar</a> 
                        </AuthorizeView>
              </div>
                    <div class="card-footer d-flex justify-content-between">
                        <div>
                            <input type="number" @bind="prop.cantidades[producto.id]" min="1" max="@producto.cantidad" />
                            <button class="btn btn-primary mt-2" @onclick="() => AgregarAlCarrito(producto.id)">Agregar al carrito</button>

                        </div>                    
                    </div>
                    @if (prop.showAlert)
                    {
                        <div class="alert alert-danger mt-2" role="alert">
                            @prop.alertMessage
                        </div>
                    }
                </div>
            </div>
        }
    }
</div>
<a href="/crearproducto" class="btn btn-info">Crear Producto</a>
@code {
    private List<ProductosViewModel> todosLosProductos = new List<ProductosViewModel>();
    protected override async Task OnInitializedAsync()
    {
        //Al array que inicialmete esta vacio se le asigna los productos que debe mostrar
        prop.productos = await GetProducto();
        // Inicializa el array 'proveedores' con la lista de proveedores
        prop.proveedores = await GetProveedores();
        /*Se inicializa un bucle que recorre el array de productos y asigna la cantidad a cada producto, esta cantidad corresponde
         * con la cantidad que tu agregas de ese producto al carrito
        */
        foreach (var producto in prop.productos)
        {

            prop.cantidades[producto.id] = 1; 
        }    
    }
    private async Task<ProductosViewModel[]> GetProducto()
    {
        //Se declara una variable que almacena la url a la que se va ha realizar una petición get
        //lo que hay despues del '?' son parametros de consulta.
        string url = $"api/Producto?pagina={prop.paginacion.Pagina}&CantidadAMostrar={prop.paginacion.CantidadAMostrar}";
        //Si id proveedor es distinto de 0 agrega este parametro de consulta a la url
        if (prop.idProveedor != 0)
        {
            url += $"&idProveedor={prop.idProveedor}";
        }
        //Aquí es donde se realiza esa peticion get al servidor pasando la variable anterior
        var response = await http.GetAsync(url);
        //Si la respuesta es válida...
        if (response.IsSuccessStatusCode)
        {
            //Muestra el número de páginas totales almacenado en la cabecera de la petición
            prop.paginasTotales = int.Parse(response.Headers.GetValues("totalPaginas").FirstOrDefault());
        }
        //Lee y serializa la petición
        var content = await response.Content.ReadAsStringAsync();
        //Deserializa la respuesta del servidor para mostrar los datos al usuario.
        return JsonSerializer.Deserialize<ProductosViewModel[]>(content);
    }
 
 
   

    private async Task GetBuscarProducto()
    {
        prop.buscar = prop.buscar ?? string.Empty;
        if (string.IsNullOrEmpty(prop.buscar))
        {
            prop.productos = await GetProducto();
        }
        else
        {
            todosLosProductos.Clear();
            for (int i = 1; i <= prop.paginasTotales; i++)
            {
                var response = await http.GetAsync($"api/Producto?pagina={i}&CantidadAMostrar={prop.paginacion.CantidadAMostrar}&buscar={prop.buscar}&idProveedor={prop.idProveedor}");
                var content = await response.Content.ReadAsStringAsync();
                var productosEnPagina = JsonSerializer.Deserialize<ProductosViewModel[]>(content);
                todosLosProductos.AddRange(productosEnPagina);
            }
            /*Math.Ceiling() es una funcion que redondea un número decimal hacia arriba al próximo número entero.
             * Por ejemplo si tiene el numero 2,3 si aplicas esta funcion te dara como resultado 3.
             * 1º Hacemos una conversion explicita sobre el resultado que de Math.Ceiling()
             * 2º Dentro de la funcion Math.Ceiling() hacemos una conversion explicita a double que double sirve para trabajar con numeros
             * decimales y Math.Ceiling() necesita de decimales para funcionar y como estamos trabajando con cantidades enteras
             * necesitamos convertir ese entero a decimal y lo que hacemos es tomar el total de productos que halla con
             * (double)todosLosProductos.Count y con double al principio convertimos ese entero de manera explicita a decimal y lo dividimos
             * entre 2 que es la cantidad de registros a mostrar que es la cantidad por defecto que tenemos y de lo que salga de esta division
             * pues redondeea al numero decimal hacia arriba mas proximo.
             *  Por ejemplo, si el resultado de esta división es 5.3, esta función devolverá 6
             */
            prop.paginasTotales = (int)Math.Ceiling((double)todosLosProductos.Count / prop.paginacion.CantidadAMostrar);
            MostrarProductosPorPagina();
        }
        // Ordenar por precio si el criterio ha cambiado, ordenarPorPrecio esta variable almacena el estado actual y ordenarPorPrecioAnterior
              //almacena el estado anrior los criterios son:
             //null--> no se ha usado el filtro.
            //asc-->orden ascendente
           //desc-->orden descente
        if (prop.ordenarPorPrecio != prop.ordenarPorPrecioAnterior)
        {
            await OrdenarPorPrecio();
            prop.ordenarPorPrecioAnterior = prop.ordenarPorPrecio;
        }
        // Filtrar por proveedor si el proveedor seleccionado ha cambiado. 'idProveedor' almacena el estado actual y 'idProveedorAnterior'
        // almacena el estado anterior. Los posibles estados son:
        // 0 --> ningún proveedor ha sido seleccionado.
        // 1, 2, 3, etc. --> corresponde al ID del proveedor seleccionado.
        if (prop.idProveedor != prop.idProveedorAnterior)
        {
            await OrdenarPorProveedor();
            prop.idProveedorAnterior = prop.idProveedor;
        }
    }

    private void MostrarProductosPorPagina()
    {
        /* Paginacion.pagina lo tenemos por defecto en 1 y paraginacion.cantidad a mostrar en 2 por defecto.
         * Esta primera línea de inicio pues primero hace una resta y de lo que salga de esa resta lo multiplica por 2.
         * Por ejemplo, si estamos en la página 2, la resta sería 2-1=1 y la multiplicación 1*2=2.
         */
        int inicio = (prop.paginacion.Pagina - 1) * prop.paginacion.CantidadAMostrar;
        /* Luego aquí toma el valor que haya salido de la variable inicio que es 2 y suma la cantidad a mostrar que es 4 porque 2+2=4.
         * Recordemos que la cantidad a mostrar es 2 por defecto.
         */
        //Esta variable no se esta usando pero se podria usar para limitar el numero de resultados de la busqueda
        int fin = inicio + prop.paginacion.CantidadAMostrar;
        /* Pues teniendo esas dos operaciones hechas pues toma todos los productos que hayan salido del resultado de búsqueda y cuando
         * cambiamos de página salta los 2 primeros registros y toma los dos siguientes.
         * En realidad, la función Take() toma la cantidad de registros a mostrar, no la diferencia entre fin e inicio.
         */
        prop.productos = todosLosProductos.Skip(inicio).Take(prop.paginacion.CantidadAMostrar).ToArray();
        foreach (var producto in prop.productos)
        {
            if (!prop.cantidades.ContainsKey(producto.id))
            {
                prop.cantidades[producto.id] = 1;
            }
        }
    }
    // private void MostrarProductosPorPagina()
    // {
    //     // Calcula el índice de inicio basado en la página actual y la cantidad de productos a mostrar por página
    //     int inicio = (prop.paginacion.Pagina - 1) * prop.paginacion.CantidadAMostrar;

    //     // Define el número máximo de resultados que quieres mostrar
    //     int fin = 100; 

    //     // Calcula cuántos productos tomar, teniendo en cuenta el límite máximo
    //     int cantidadAMostrar = Math.Min(fin - inicio, prop.paginacion.CantidadAMostrar);

    //     // Asegúrate de que la cantidad a mostrar no exceda el número total de productos
    //     cantidadAMostrar = Math.Min(cantidadAMostrar, todosLosProductos.Count - inicio);

    //     // Toma los productos correspondientes a la página actual, sin exceder el límite máximo
    //     prop.productos = todosLosProductos.Skip(inicio).Take(cantidadAMostrar).ToArray();

    //     foreach (var producto in prop.productos)
    //     {
    //         if (!prop.cantidades.ContainsKey(producto.id))
    //         {
    //             prop.cantidades[producto.id] = 1;
    //         }
    //     }
    // }


    private async Task OrdenarPorPrecio()
    {
        var response = await http.GetAsync($"api/Producto?pagina={prop.paginacion.Pagina}&CantidadAMostrar={prop.paginacion.CantidadAMostrar}&ordenarPorPrecio={prop.ordenarPorPrecio}");
        var content = await response.Content.ReadAsStringAsync();
        prop.productos = JsonSerializer.Deserialize<ProductosViewModel[]>(content);
        /*Ha la hora de hacer la busqueda esto hay que ponerlo de nuevo para que se asigne bien las cantidades a cada producto
         * esto corresponde con la cantidad del producto que vas a mandar al carrito
        */
        foreach(var producto in prop.productos)
        {
            if (!prop.cantidades.ContainsKey(producto.id))
            {
                prop.cantidades[producto.id] = 1;
            }
        }
    }
    private async Task OrdenarPorProveedor()
    {
        //Si no se ha seleccionado ningun proveedor sale de esta funcion.
        if (prop.idProveedor == 0)
        {

            return;
        }
        var response = await http.GetAsync($"api/Producto?pagina={prop.paginacion.Pagina}&CantidadAMostrar={prop.paginacion.CantidadAMostrar}&idProveedor={prop.idProveedor}");
        var content = await response.Content.ReadAsStringAsync();
        prop.productos = JsonSerializer.Deserialize<ProductosViewModel[]>(content);
        foreach (var producto in prop.productos)
        {
            if (!prop.cantidades.ContainsKey(producto.id))
            {
                prop.cantidades[producto.id] = 1;
            }
        }
    }
    private async Task<ProveedorViewModel[]> GetProveedores()
    {
        var response = await http.GetAsync("api/Proveedor");
        var content = await response.Content.ReadAsStringAsync();
        return JsonSerializer.Deserialize<ProveedorViewModel[]>(content);
    }  
    private async Task PaginaSeleccionada(int pagina)
    {
       
        prop.paginacion.Pagina = pagina;
        prop.productos = await GetProducto();
        prop.proveedores = await GetProveedores();
        await GetBuscarProducto();

       /*Recorremos el array de productos y ha cada producto se le asigna una cantidad. Esta cantidad corresponde con los productos
        * que se van ha agregar al carrito.
        */
        foreach (var producto in prop.productos)
        {
            if (!prop.cantidades.ContainsKey(producto.id))
            {
                prop.cantidades[producto.id] = 1; 
            }
        }
        prop.paginaActual = pagina;
        
    }
    private async Task AgregarAlCarrito(int idProducto)
    {
        // Obtiene la cantidad del diccionario 'cantidades' para pasar esas cantidades al carrito
        int cantidad = prop.cantidades[idProducto];
        // Preparamos una petición especial donde necesitamos pasar ciertas propiedades en formato JSON.
        // En este caso, para agregar un producto al carrito, necesitamos 'idProducto' y 'cantidad'.
        // Esta línea de código crea el contenido de la petición serializando 'idProducto' y 'cantidad' a JSON.
        var content = new StringContent(JsonSerializer.Serialize(new { idProducto, cantidad }), Encoding.UTF8, "application/json");   
        //Hace la peticion al servidor pasandole la idProducto y cantidad anteriormente serializada
        var response = await http.PostAsync("api/Producto/carrito", content);
        if (response.IsSuccessStatusCode)
        {
            //Si el producto se agrego correctamente muestra los productos con el nuevo producto
            prop.productos = await GetProducto();
        }
        else
        {
            //Si ha ocurrido un error muestra el mensaje de error
            var message = await response.Content.ReadAsStringAsync();
            ShowAlert(message);
        }
    }
    private async Task LimpiarFiltros()
    {
        // Restablece las variables de filtro a sus valores predeterminados
        prop.buscar = null;
        prop.ordenarPorPrecio = null;
        prop.ordenarPorPrecioAnterior = null;
        prop.idProveedor = 0;
        prop.idProveedorAnterior = 0;
        // Obtiene todos los productos sin aplicar ningún filtro
        prop.productos = await GetProducto();
        foreach (var producto in prop.productos)
        {
            if (!prop.cantidades.ContainsKey(producto.id))
            {
                prop.cantidades[producto.id] = 1;
            }
        }
       
    }

    private void ShowAlert(string message)
    {
       prop.showAlert = true;
        prop.alertMessage = message;
    }

}
