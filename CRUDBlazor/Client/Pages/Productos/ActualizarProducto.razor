@page "/actualizarproducto/{id}"
@using CRUDBlazor.Shared.Productos
@using CRUDBlazor.Shared.Proveedores
@using System.Text.Json
@using System.Text
@inject HttpClient http
@inject NavigationManager NavigationManager

<h3>Actualizar Producto</h3>
<EditForm Model="producto" OnValidSubmit="EditarProducto" class="form-group">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <label>Nombre Producto: </label>
    <InputText  @bind-Value="producto.nombreProducto"  class="form-control" placeholder="Nombre del producto"></InputText>
    <label>Descripción: </label>
    <InputText @bind-Value="producto.descripcion" class="form-control mt-2" placeholder="Descripción del producto"></InputText>
    <label>Subir imagen: </label>
    <InputFile OnChange="OnInputFileChange" class="mt-2"></InputFile>
    <br />
    <label>Imagen actual</label>
    <br />
    <img src="@imageURL" alt="Imagen del producto aquí" style="height:100px; width:100px" />
    <br />
    <label>Imagen a la que va a cambiar</label>
    <br />
    <img src="@($"data:{producto.TipoImagen};base64,{producto.imagen}")" alt="Para ver la imagen proporcione una realizando clic en el botón examinar" style="width:100px; height:100px" />
    <br />
    <label>Cantidad: </label>
    <InputNumber @bind-Value="producto.cantidad" class="form-control mt-2" placeholder="Cantidad del producto"></InputNumber>
    <label>Precio: </label>
    <InputNumber @bind-Value="producto.precio" class="form-control mt-2" placeholder="Precio del producto"></InputNumber>
    <label>Seleccione Proveedor: </label>
    <InputSelect @bind-Value="producto.idProveedor" class="form-control mt-2">
        @foreach (var proveedor in proveedores)
        {
            <option value="@proveedor.id">@proveedor.nombreProveedor</option>
        }
    </InputSelect>
    <button type="submit" class="btn btn-primary mt-2">Actualizar Producto</button>
</EditForm>

@code {
    [Parameter]
    public string id { get; set; }

    private ProductosViewModel producto = new ProductosViewModel();
    private ProveedorViewModel[] proveedores = new ProveedorViewModel[0];
    private string imageURL { get; set; }

    protected override async Task OnInitializedAsync()
    {
        proveedores = await GetProveedores();
        if (proveedores.Length > 0)
        {
            producto.idProveedor = proveedores[0].id;
        }

        var response = await http.GetAsync($"api/Producto/{id}");
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            producto = JsonSerializer.Deserialize<ProductosViewModel>(content);
            imageURL = producto.imagen;
        }
    }

    private async Task<ProveedorViewModel[]> GetProveedores()
    {
        var response = await http.GetAsync("api/Proveedor");
        var content = await response.Content.ReadAsStringAsync();
        return JsonSerializer.Deserialize<ProveedorViewModel[]>(content);
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;
        if (imageFile != null)
        {
            using var memoryStream = new MemoryStream();
            await imageFile.OpenReadStream(maxAllowedSize: 6 * 1024 * 1024).CopyToAsync(memoryStream);
            var contenido = memoryStream.ToArray();
            producto.imagen = Convert.ToBase64String(contenido);
            producto.extension = Path.GetExtension(imageFile.Name);
            producto.TipoImagen = imageFile.ContentType;
        }
    }

    private async Task EditarProducto()
    {
        var jsonProducto = JsonSerializer.Serialize(producto);
        var contenido = new StringContent(jsonProducto, Encoding.UTF8, "application/json");
        var resultado = await http.PutAsync($"api/Producto/{id}", contenido);
        if (resultado.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/productos");
        }
        else
        {
            Console.WriteLine("Error al actualizar el producto");
        }
    }
}
