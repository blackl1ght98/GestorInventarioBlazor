@page "/detalles-pedido/{id}"
@using CRUDBlazor.Shared;
@using CRUDBlazor.Shared.Pedidos
@inject HttpClient Http
<h3>Detalles del pedido</h3>
@if (pedido == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <table class="table table-striped table-bordered w-100">
        <thead>
            <tr>
                <th class="col-2">Nombre del Producto</th>
                <th class="col-2">Cantidad</th>
                <th class="col-2">Precio del producto</th>
                <th class="col-2"> Precio sin IVA</th>
                <th class="col-2">Precio con IVA (21%)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var detalle in pedido.DetallePedidos)
            {
                <tr>
                    <td>@detalle.producto?.nombreProducto</td>
                    <td>@detalle.cantidad</td>
                    <td>@detalle.producto?.precio</td>
                    <td>@((detalle.cantidad * detalle.producto?.precio))</td>
                    <td>@((detalle.cantidad * (detalle.producto?.precio) * 1.21))</td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    //La id se pasa como parametro, como la url es string el id hay que ponerlo igual, luego en el controlador se convierte a numero
    [Parameter]
    public string id { get; set; }
    // Debido a la arquitectura de Blazor, el servidor y el cliente están separados, lo que significa que debemos manejar los datos de una
    // manera que ambos puedan entender.
    // Cuando consultas algo desde el cliente al servidor, debes asegurarte de que los datos estén formateados de manera que puedan ser
    // mostrados correctamente.
    // Cuando recibes datos del servidor, estos vienen en formato JSON. En JSON, todas las propiedades comienzan con una letra minúscula.
    // Por lo tanto, si en tu modelo PedidosViewModel nombras una propiedad como "Nombre", no será reconocida. Debes nombrarla como "nombre"
    // para que sea detectada correctamente.
    // La razón de esto es la convención de nomenclatura de las propiedades en los archivos JSON.
    PedidosViewModel pedido;
    //Este metodo carga todo al inicio de la pagina
    protected override async Task OnInitializedAsync()
    {
        //el metodo GetFromJsonAsync hace la serializacion y deserializacion de manera automatica funciona similar a como hacerlo de manera manual
        //pero mantiene la misma funcion hacer la peticion al servidor
        pedido = await Http.GetFromJsonAsync<PedidosViewModel>($"api/Pedidos/{id}");
        // Inicializa la lista de productos seleccionados. Esta lista almacena un booleano para cada producto en el pedido, indicando si 
        // el producto ha sido seleccionado o no.  Al principio, todos los productos se marcan como no seleccionados (false)
        pedido.productosSeleccionados = new List<bool>(new bool[pedido.DetallePedidos!.Count]);
        // Inicializa la lista de cantidades. Esta lista almacena un entero para cada producto en el pedido, indicando la cantidad de ese 
        // producto en el pedido. Al principio, todas las cantidades se establecen en cero.
        pedido.cantidades = new List<int>(new int[pedido.DetallePedidos.Count]);
    }
}
