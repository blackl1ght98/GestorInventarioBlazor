@using System.Text.Json
@using System.Text
@using CRUDBlazor.Shared.Pedidos
@inject HttpClient http
@page "/pedidos"
<h3>Pedidos</h3>
<div class="container-fluid" style="max-width: 100%; overflow-x: hidden;">
    @if (pedidos == null)
    { 
        <div class="spinner-border" role="status">
            <span class="sr-only"></span>
        </div>
    }
    else
    {
        <ConfiguracionPaginacion PaginasTotales="paginasTotales" PaginaActual="paginaActual" PaginaSeleccionada="PaginaSeleccionada"></ConfiguracionPaginacion>
        <EditForm Model="this" OnValidSubmit="GetBuscarPedidos">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <InputText id="buscar" @bind-Value="buscar" class="form-control" placeholder="Buscar producto" />
            <label>Fecha Inicio</label>
            <InputDate id="fechaInicio" @bind-Value="fechaInicio" class="form-control" placeholder="Fecha de inicio" />
            <label>Fecha Fin</label>
            <InputDate id="fechaFin" @bind-Value="fechaFin" class="form-control" placeholder="Fecha de fin" />

            <button type="submit" class="btn btn-primary mt-2">Buscar</button>
        </EditForm>
        @foreach (var pedido in pedidos)
        {
            <div class="card mb-3">
                <div class="card-header">
                    <h5>Datos del Pedido</h5>
                </div>
                <div class="card-body">
                    <p class="card-text"><strong>Numero Pedido:</strong> @pedido.numeroPedido</p>
                    <p class="card-text"><strong>Fecha Pedido:</strong> @pedido.fechaPedido</p>
                    <p class="card-text"><strong>Estado pedido:</strong> @pedido.estadoPedido</p>
                    <p class="card-text"><strong>Cliente del pedido:</strong> @pedido.idUsuarioNavigation.nombreCompleto</p>
                </div>
                <div class="card-footer d-flex justify-content-between">
                    <div>
                        <a href="/detalles-pedido/@pedido.id" class="btn btn-info mt-2 ml-2">Ver detalles</a>
                        <AuthorizeView Roles="administrador">
                        <a href="/deletepedido/@pedido.id" class="btn btn-danger mt-2 ml-2">Eliminar</a>
                        <a href="/actualizarpedido/@pedido.id" class="btn btn-primary mt-2 ml-2">Actualizar</a>
                        </AuthorizeView>
                    </div>
                </div>
            </div>
        }
    }
</div>
<a href="/crearpedido" class="btn btn-info">Crear Pedido</a>
@code {
    // Debido a la arquitectura de Blazor, el servidor y el cliente están separados, lo que significa que debemos manejar los datos de una
    // manera que ambos puedan entender.
    // Cuando consultas algo desde el cliente al servidor, debes asegurarte de que los datos estén formateados de manera que puedan ser
    // mostrados correctamente.
    // Cuando recibes datos del servidor, estos vienen en formato JSON. En JSON, todas las propiedades comienzan con una letra minúscula.
    // Por lo tanto, si en tu modelo PedidosViewModel nombras una propiedad como "Nombre", no será reconocida. Debes nombrarla como "nombre"
    // para que sea detectada correctamente.
    // La razón de esto es la convención de nomenclatura de las propiedades en los archivos JSON.
    private PedidosViewModel pedido = new PedidosViewModel();
    private PedidosViewModel[] pedidos;
    private Paginacion paginacion = new Paginacion();
    private int paginaActual = 1;
    private int paginasTotales;
    private string buscar;
    private DateTime? fechaInicio;
    private DateTime? fechaFin;
    private List<PedidosViewModel> todosLosPedidos = new List<PedidosViewModel>();
    //El metodo OnInitializedAsync() se encarga de cargar todo lo que se ponga en cuanto la pagina se carga, aquui obtenemos todos los pedidos
    protected override async Task OnInitializedAsync()
    {
        pedidos = await GetAllPedidos();
    }
    private async Task<PedidosViewModel[]> GetAllPedidos()
    {
        //Esta peticion al sercidor esta asi para el manejo de la paginacion es una consulta en la url
        var response = await http.GetAsync($"api/Pedidos?pagina={paginacion.Pagina}&CantidadAMostrar={paginacion.CantidadAMostrar}");
        if (response.IsSuccessStatusCode)
        {
            //Si la respuesta es satisfactoria obtiene de la cabecera de la peticion el total de paginas a costrar
            paginasTotales = int.Parse(response.Headers.GetValues("totalPaginas").FirstOrDefault());
            Console.WriteLine($"Paginas totales después de obtener usuarios: {paginasTotales}");
        }
        //Lee la respuesta serializada del servidor
        var content = await response.Content.ReadAsStringAsync();
        //Deserializa la respuesta del servidor y lo muestra al usuario
        return JsonSerializer.Deserialize<PedidosViewModel[]>(content);
    }
    private async Task GetBuscarPedidos()
    {
        buscar = buscar ?? string.Empty;
        string fechaInicioParam = fechaInicio.HasValue ? fechaInicio.Value.ToString("yyyy-MM-dd") : "";
        string fechaFinParam = fechaFin.HasValue ? fechaFin.Value.ToString("yyyy-MM-dd") : "";
        if (string.IsNullOrEmpty(buscar) && string.IsNullOrEmpty(fechaInicioParam) && string.IsNullOrEmpty(fechaFinParam))
        {
            pedidos = await GetAllPedidos();
        }
        todosLosPedidos.Clear();
        for(var i=1;i<=paginasTotales; i++)
        {
            var response = await http.GetAsync($"api/Pedidos?pagina={i}&CantidadAMostrar={paginacion.CantidadAMostrar}&buscar={buscar}&fechaInicio={fechaInicioParam}&fechafin={fechaFinParam}");
            var content = await response.Content.ReadAsStringAsync();
            var pedidosEnPagina = JsonSerializer.Deserialize<PedidosViewModel[]>(content);
            todosLosPedidos.AddRange(pedidosEnPagina);
        }
        paginasTotales = (int)Math.Ceiling((double)todosLosPedidos.Count / paginacion.CantidadAMostrar);
        MostrarPedidosPorPaginas();
    }
    private void MostrarPedidosPorPaginas()
    {
        int inicio = (paginacion.Pagina - 1) * paginacion.CantidadAMostrar;
        int fin = inicio + paginacion.CantidadAMostrar;
        pedidos = todosLosPedidos.Skip(inicio).Take(paginacion.CantidadAMostrar).ToArray();
    }
    private async Task PaginaSeleccionada(int pagina)
    {
        Console.WriteLine($"Pagina seleccionada: {pagina}");
        paginacion.Pagina = pagina;
        pedidos = await GetAllPedidos();
        await GetBuscarPedidos();
        paginaActual = pagina;
        Console.WriteLine($"Pagina actual después de la selección: {paginaActual}");
    }
}
